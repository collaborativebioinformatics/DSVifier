#!/bin/bash
# caviar 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of ld_file: '$ld_file'"
    echo "Value of z_file: '$z_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$ld_file" -o ld_file

    dx download "$z_file" -o z_file

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # Options: 
    # -h, --help            		show this help message and exit 
    # -o OUTFILE, --out=OUTFILE 	specify the output file
    # -l LDFILE, --ld_file=LDFILE  	the ld input file
    # -z ZFILE, --z_file=ZFILE	the z-score and rsID files
    # -r RHO, --rho-prob=RHO		set $pho$ probability (default 0.95)
    # -g GAMMA, --gamma		set $gamma$ the prior of a SNP being causal (default 0.01)
    # -c causal			set the maximum number of causal SNPs
    # -f 1				to out the probaility of different number of causal SNP

    ld_filename=$(dx describe "$ld_file" --name)
    output_root=$(echo "$ld_filename" | cut -f 1 -d '.')
    echo "output_root=$output_root"

    CAVIAR -l ld_file -z z_file -o "$output_root"  "$other_options"

    ls -l

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    # -rw-rw-r-- 1 dnanexus dnanexus     76 Jan  8 01:07 ${output_root}_set
    # -rw-rw-r-- 1 dnanexus dnanexus   1724 Jan  8 01:07 ${output_root}_post
    # -rw-rw-r-- 1 dnanexus dnanexus     12 Jan  8 01:07 ${output_root}.log

    output_set=$(dx upload "${output_root}_set" --brief)
    output_post=$(dx upload "${output_root}_post" --brief)
    output_log=$(dx upload "${output_root}.log" --brief)

    echo $output_set
    echo $output_post
    echo $output_log

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_set "$output_set" --class=file
    dx-jobutil-add-output output_post "$output_post" --class=file
    dx-jobutil-add-output output_log "$output_log" --class=file
}
